#include<stdio.h>
#include<conio.h>
#include<malloc.h>
struct node
{
 int data;
 struct node *link;
};
void merge(struct node *,struct node *,struct node **);
void append(struct node **,int );
void main()
{ clrscr();
  struct node *n,*m,*o;
  n=NULL; m=NULL;  o=NULL;
  int i=0,j=0,a[5]={1,3,5,6,8},b[5]={3,4,6,8,9};
  while(i<5)
  {
   append(&n,a[i]);
   i++;
  }
  while(j<5)
  {
   append(&m,b[j]);
   j++;
  }
  merge(n,m,&o);
  while(o!=NULL)
  {
   printf("%d ",(o->data));
   o=o->link;
  }
  free(n);
  free(m);
  free(o);
  getch();
}
/*To Merge Two ordered linked lists in ascending data order and delete all repeated data*/
void merge(struct node *a,struct node *b,struct node **c)
{
  struct node *z;
  z=NULL;
  /*If both are null then exit*/
  if(a==NULL&&b==NULL)
  {
  return;
  }
  while(a!=NULL&&b!=NULL)   /*till any of list do not end*/
  {
   if(*c==NULL)
   {
    *c=(struct node*)malloc(sizeof(struct node));
    z=*c;
   }
   else
   {
    z->link=(struct node*)malloc(sizeof(struct node));//Address of allocated node saved
    z=z->link;
   }

   //Merging starts
   if(a->data>b->data)
   {
    z->data=b->data;
    b=b->link;
   }
   else
   {
    if(a->data<b->data)
    {
     z->data=a->data;
     a=a->link;
    }
    else
    {
     if(a->data==b->data)
     {
      z->data=b->data;
      b=b->link;
      a=a->link;
     }
    }
   }
  }
  /*if any of lists do not end*/
  while(a!=NULL)
  {
   z->link=(struct node*)malloc(sizeof(struct node));
   z=z->link;
   z->data=a->data;
   a=a->link;
  }
  while(b!=NULL)
  {
   z->link=(struct node*)malloc(sizeof(struct node));
   z=z->link;
   z->data=b->data;
   b=b->link;
  }
}
/*any element we want to insert to linked lists will append */
void append(struct node **a,int num)
{
 struct node *temp,*p;
 if(*a==NULL)
 {
  temp=(struct node*)malloc(sizeof(struct node));
  temp->data=num;
  temp->link=NULL;
  *a=temp;
 }
 else
 {
  temp=*a; // *a passes the address of first node
  while(temp->link!=NULL)
    temp=temp->link;

  p=(struct node*)malloc(sizeof(struct node));
  p->data=num;
  p->link=NULL;
  temp->link=p;
 }
}
